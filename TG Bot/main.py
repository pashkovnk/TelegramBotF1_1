import telebot
from telebot import types

import config
from config import stickerpacks, liveURLs
from info import getTeamInfo, getDriverInfo, getCalendar

bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_menu = types.KeyboardButton("–ú–µ–Ω—é üßæ")
    markup.add(button_menu)
    bot.send_message(message.chat.id,
                     text="<b>–ü—Ä–∏–≤–µ—Ç, {0.first_name}!</b>\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É \"–ú–µ–Ω—é\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ –º–Ω–æ–π".format(
                         message.from_user), reply_markup=markup, parse_mode="HTML")
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEGph1jidiYrjUtZsw6JhY6XUMHMZT6awACEyIAAiO60ErugP0LGPd1mysE")


@bot.message_handler(content_types=['text'])
def func(message):
    button_teams = types.KeyboardButton("–ö–æ–º–∞–Ω–¥—ã üèé")
    button_back = types.KeyboardButton("–ú–µ–Ω—é üßæ")
    button_drivers = types.KeyboardButton("–ü–∏–ª–æ—Ç—ã üë®‚ÄçüöÄ")
    button_calendar = types.KeyboardButton("–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ")
    button_stickers = types.KeyboardButton("–°—Ç–∏–∫–µ—Ä—ã üòÅ")
    button_live = types.KeyboardButton("–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ üì∫")
    if (message.text in ["–ú–µ–Ω—é üßæ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô", "–ú–µ–Ω—é"]):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(button_calendar, button_stickers, button_teams, button_drivers, button_live)
        bot.send_message(message.chat.id, text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

    elif ((message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ") or (message.text in list(map(str, range(1950, 2100))))):
        if message.text != "–ö–∞–ª–µ–Ω–¥–∞—Ä—å üìÜ":
            bot.send_message(message.chat.id, f"–û–¥–Ω—É –º–∏–Ω—É—Ç–∫—É, —Å–µ–π—á–∞—Å –ø–æ–∏—â—É –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–∑–æ–Ω {message.text}")
            calendar = getCalendar(message.text)
            if calendar != f"<b>–Ø –Ω–µ –Ω–∞—à–µ–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å –§–æ—Ä–º—É–ª—ã-1 —Å–µ–∑–æ–Ω–∞ {message.text} üòû</b>\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —É –º–µ–Ω—è –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ —è —Å–º–æ–≥—É –µ–≥–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å":
                calendar = f"<b>–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏</b> üïµÔ∏è‚Äç‚ôÇÔ∏è\n\n\n{getCalendar(message.text)}"
            bot.send_message(message.chat.id, calendar, parse_mode="HTML")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(button_calendar, button_stickers, button_teams, button_drivers)
            bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ–¥")

    elif (message.text == "–°—Ç–∏–∫–µ—Ä—ã üòÅ"):
        for sticker in stickerpacks:
            bot.send_sticker(message.chat.id, sticker)
        bot.send_message(message.chat.id,
                         text="<b>–í–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏!</b>  üèé\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫ —Å–µ–±–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±–æ–π –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É <b>\"–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã\"</b>",
                         parse_mode="HTML")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(button_calendar, button_stickers, button_teams, button_drivers)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif (message.text == "–ö–æ–º–∞–Ω–¥—ã üèé"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        team_buttons = [types.KeyboardButton(f"{team}") for team in config.teamURLs.keys()]
        for team in range(len(team_buttons)):
            markup.add(team_buttons[team], row_width=2)
        markup.add(button_back, row_width=2)
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif (message.text in config.teamURLs.keys()):
        teamInfo = getTeamInfo(config.teamURLs.get(message.text))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        button_Driver1 = types.KeyboardButton(f"{teamInfo[2]}")
        button_Driver2 = types.KeyboardButton(f"{teamInfo[3]}")
        markup.add(button_Driver1, button_Driver2, button_teams, button_back)
        bot.send_photo(message.chat.id, photo=open(f"teamPics/{teamInfo[1]}.jpg", 'rb'), caption=teamInfo[0], parse_mode='HTML')
        bot.send_message(message.chat.id, text=f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–∏–ª–æ—Ç–∞—Ö <b>{teamInfo[1]}</b>?",
                         reply_markup=markup, parse_mode='HTML')
    elif (message.text in config.driverURLs.keys()):
        driverInfo = getDriverInfo(config.driverURLs.get(message.text))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(button_teams, button_drivers, button_back)
        bot.send_photo(message.chat.id, photo=open(f"driverPics/{driverInfo[1]}.jpg", 'rb'), caption=driverInfo[0], parse_mode='HTML', reply_markup=markup)
    elif (message.text == "–ü–∏–ª–æ—Ç—ã üë®‚ÄçüöÄ"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        driver_buttons = [types.KeyboardButton(f"{driver}") for driver in config.driverURLs.keys()]
        for driver in range(len(driver_buttons)):
            markup.add(driver_buttons[driver], row_width=2)
        markup.add(button_back, row_width=2)
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –ø–∏–ª–æ—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif (message.text == "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ üì∫"):
        markup = types.InlineKeyboardMarkup()
        live_buttons = [types.InlineKeyboardButton(text=f"{liveURL[0]}", url=f"{liveURL[1]}") for liveURL in liveURLs]
        for button in live_buttons:
            markup.add(button, row_width=2)
        bot.send_message(message.chat.id, "<b>–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –§–æ—Ä–º—É–ª—É-1? üì∫</b>\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –≤–µ–¥—É—â–∏–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä—è–º—ã–º–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º–∏ –≥–æ–Ω–æ—á–Ω—ã—Ö —É–∏–∫-—ç–Ω–¥–æ–≤", reply_markup=markup, parse_mode='HTML')

    else:
        bot.send_message(message.chat.id, text="–ü—Ä–æ—Å—Ç–∏–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî")


bot.polling(none_stop=True)
