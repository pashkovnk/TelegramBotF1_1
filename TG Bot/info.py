import os

import requests
from bs4 import BeautifulSoup
from googletrans import Translator

from config import flagsEmoji

translator = Translator()



# TODO —Å–¥–µ–ª–∞–π —Ç–∞–π–º–µ—Ä –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ì—Ä–∞–Ω-–ø—Ä–∏
# TODO —Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ì—Ä–∞–Ω-–ø—Ä–∏ (–§–æ—Ç–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥—É–≥–ª-–∫–∞—Ä—Ç—É)
#
# def timeBeforeNextGP(url):
#     responce = requests.get(url)
#     bs = BeautifulSoup(responce.text, 'lxml')
#     timeBeforeGP = [" ".join(bs.find('div', class_='headmenuredr').text.split()[:2]), bs.find('div', class_='timer')]
#     print(timeBeforeGP)
#
# timeBeforeNextGP('https://www.f1-world.ru/teams/list.php3')

def getCalendar(year):
    responce = requests.get(f'https://ru.motorsport.com/f1/schedule/{year}')
    bs = BeautifulSoup(responce.text, 'lxml')
    try:
        GP_Links = bs.find('table', class_='ms-schedule-table ms-schedule-table--your').find_all('tbody')
    except AttributeError:
        calendar = f"<b>–Ø –Ω–µ –Ω–∞—à–µ–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å –§–æ—Ä–º—É–ª—ã-1 —Å–µ–∑–æ–Ω–∞ {year} üòû</b>\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —É –º–µ–Ω—è –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ —è —Å–º–æ–≥—É –µ–≥–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å"
        return calendar
    GP_Links = ["https://ru.motorsport.com" + i.find_next('a').get('href') for i in GP_Links]
    GPs = []
    for link in GP_Links:
        responce = requests.get(link)
        bs = BeautifulSoup(responce.text, 'lxml')
        try:
            GP_Info = [
                " ".join(bs.find('div', class_='ms-entity-header_wrapper ms-ml').find('h1').text.split()[:-1]),
                [i.text for i in bs.find_all('span', class_='ms-event-header-period_day')],
                [i.text for i in bs.find_all('span', class_='ms-event-header-period_month')],
                [bs.find('div', class_='ms-event-header_location').find('span').text,
                 bs.find('div', class_='ms-event-header_location').find('a').text],
                bs.find('span', class_='ms-schedule-item_results-title').text,
            ]
            GP_Info = [GP_Info[0], GP_Info[1][0] + " " + GP_Info[2][0], GP_Info[1][1] + " " + GP_Info[2][1],
                       GP_Info[3][0],
                       translator.translate(str(GP_Info[3][0]), dest='en').text.lower(), GP_Info[3][1],
                       GP_Info[
                           4]]  # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤ —É–¥–æ–±–Ω–æ–º –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ [–ò–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞, –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞, —Å—Ç—Ä–∞–Ω–∞, –∫–æ–¥ –¥–ª—è —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã, –¢—Ä–∞—Å—Å–∞, –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è]
            GPs.append(GP_Info)
        except AttributeError:
            if (GP_Links.index(link) + 1) != len(GP_Links):
                continue
            else:
                if len(GPs) != 0:
                    for GP in GPs:
                        calendar += f"\n{GPs.index(GP) + 1}.  <b>{GP[0]}</b>    {GP[1]} ‚Äî {GP[2]}" \
                                    f"\n    {len(str(GPs.index(GP) + 1)) ** 2 * ' '}<b>–°—Ç—Ä–∞–Ω–∞:</b> {GP[3]} {flagsEmoji.get(GP[4])}" \
                                    f"\n    {len(str(GPs.index(GP) + 1)) ** 2 * ' '}<b>–¢—Ä–∞—Å—Å–∞:</b> {GP[5]}" \
                                    f"\n    {len(str(GPs.index(GP) + 1)) ** 2 * ' '}<b>–°—Ç–∞—Ç—É—Å:</b> {GP[6]}\n"
                    return calendar
                else:
                    calendar = f"<b>–Ø –Ω–µ –Ω–∞—à–µ–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å –§–æ—Ä–º—É–ª—ã-1 —Å–µ–∑–æ–Ω–∞ {year} üòû</b>\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —É –º–µ–Ω—è –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ —è —Å–º–æ–≥—É –µ–≥–æ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å"
                    return calendar
        calendar = f"<b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–µ–∑–æ–Ω–∞ –§–æ—Ä–º—É–ª—ã-1 {year}:</b>\n"
    for GP in GPs:
        calendar += f"\n{GPs.index(GP) + 1}.  <b>{GP[0]}</b>    {GP[1]} ‚Äî {GP[2]}" \
                    f"\n    {len(str(GPs.index(GP) + 1))**2*' '}<b>–°—Ç—Ä–∞–Ω–∞:</b> {GP[3]} {flagsEmoji.get(GP[4])}" \
                    f"\n    {len(str(GPs.index(GP) + 1))**2*' '}<b>–¢—Ä–∞—Å—Å–∞:</b> {GP[5]}" \
                    f"\n    {len(str(GPs.index(GP) + 1))**2*' '}<b>–°—Ç–∞—Ç—É—Å:</b> {GP[6]}\n"
    return calendar


# print(getCalendar(2018))

def getTeamInfo(url):
    response = requests.get(url)
    bs = BeautifulSoup(response.text, "lxml")
    teamName = bs.find('div', class_='ms-entity-header_title-wrapper').find('div').find('h1',
                                                                                        class_='ms-entity-header_title').text
    teamCountry = translator.translate(bs.find('div', class_='ms-entity-header_title-wrapper').find('img').get('title'),
                                       dest='ru').text
    teamDrivers = bs.find('div', class_='ms-grid-vert-drivers-1-2').find_all('div', class_='ms-item_info')
    for i in teamDrivers:
        teamDrivers[teamDrivers.index(i)] = [i.find('a', class_='ms-item_link').get('href'),
                                             " ".join((i.find('a', class_='ms-item_link').text).split()),
                                             i.find('span', class_="ms-item-driver_number").text,
                                             ]
    teamLogo = bs.find('div', class_='ms-entity-header_img-wrapper').find('img',
                                                                          class_='ms-item_img ms-item_img--3_2').get(


        'src')
    if not os.path.exists('teamPics/'):
        os.mkdir('teamPics/')
    imageData = requests.get(teamLogo, verify=False).content
    with open('teamPics/' + teamName + '.jpg', 'wb') as handler:
        handler.write(imageData)
    info = (f'<b>{teamName}</b>\n\n'
            f"<b>–°—Ç—Ä–∞–Ω–∞</b>: {teamCountry} {flagsEmoji.get(str(translator.translate(teamCountry, dest='en').text).lower())}\n"
            f'<b>–ü–∏–ª–æ—Ç—ã:</b> {teamDrivers[0][1]} <b>‚Ññ{teamDrivers[0][2]}</b>, {teamDrivers[1][1]} <b>‚Ññ{teamDrivers[1][2]}</b>')
    return [info, teamName, f"{teamDrivers[0][1]}", f"{teamDrivers[1][1]}"]


# getTeamInfo('https://ru.motorsport.com/team/red-bull-racing/380/')


def getDriverInfo(url):
    # TODO –ø—Ä–æ–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥/–ø–æ–¥–∏—É–º–æ–≤/—Ç–∏—Ç—É–ª–æ–≤/–æ—á–∫–æ–≤ –∑–∞ –∫–∞—Ä—å–µ—Ä—É
    # /–ø–æ–∑–∏—Ü–∏—é –≤ –∫—Ä–∞–π–Ω–µ–º —Å–µ–∑–æ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ –Ω–µ–º
    response = requests.get(url)
    bs = BeautifulSoup(response.text, "lxml")
    try:
        teamName = bs.find('div', class_='ms-entity-header_start').find('a',
                                                                        class_='ms-driver-header_team-title ms-link').text
        driverNumber = bs.find('div', class_='ms-driver_number ms-mr').text
    except AttributeError:
        # TODO –ø—Ä–æ–ø–∏—à–∏ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–æ–º–µ—Ä–∞ –ø–æ –¥—Ä—É–≥–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (–Ω–∞–ø—Ä., –≤–∏–∫–∏–ø–µ–¥–∏—è),
        # –∞ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –æ–Ω –Ω–∏–≥–¥–µ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è,
        # —Ç–æ –≤–ø–∏—à–∏ –±—ã–≤—à–∏–π –Ω–æ–º–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø—Ä–∏–ø–∏—Å–∫–æ–π, –∞ —Ç–æ –Ω–µ –∫—Ä–∞—Å–∏–≤–æ –∫–∞–∫-—Ç–æ(
        teamName = "–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã"
        driverNumber = "(–ù–µ—Ç –Ω–æ–º–µ—Ä–∞)"
    driverName = bs.find('div', class_='ms-entity-header_start').find('h1', class_='ms-entity-header_title').text
    driverAgeData = bs.find('div', class_='ms-entity-header_start').find('span',
                                                                         class_='ms-entity-header_age').text.split()
    driverAgeData = [int("".join(driverAgeData[-1].split(')'))), list(map(int, driverAgeData[0].split('-')))]
    driverNationality = bs.find('img', class_='ms-entity-header_flag').get('title').lower()
    # TODO —Ñ–æ—Ç–∫–∏ –±–µ—Ä–∏ –∏–∑ https://www.skysports.com/f1/drivers-teams,
    # —Ç—É—Ç –æ–Ω–∏ –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    driverPhoto = bs.find('img', class_="ms-item_img ms-item_img--3_2").get('src')
    if not os.path.exists('driverPics/'):
        os.mkdir('driverPics/')
    imageData = requests.get(driverPhoto, verify=False).content
    with open('driverPics/' + driverName + '.jpg', 'wb') as handler:
        handler.write(imageData)
    info = (f"<b>{driverName} ‚Ññ{driverNumber}\n\n</b>"
            f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> {teamName}\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {driverAgeData[0]}\n"
            f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {driverAgeData[1][2]}.{driverAgeData[1][1]}.{driverAgeData[1][0]}\n"
            f"<b>–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b> {translator.translate(driverNationality, dest='ru').text.capitalize()} {flagsEmoji.get(driverNationality)}\n")
    return [info, driverName]

# getDriverInfo('https://ru.motorsport.com/driver/niko-khyulkenberg/63697/')
